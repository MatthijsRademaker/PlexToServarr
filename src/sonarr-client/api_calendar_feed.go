/*
 * Sonarr
 *
 * Sonarr API docs - The v3 API docs apply to both v3 and v4 versions of Sonarr. Some functionality may only be available in v4 of the Sonarr application.
 *
 * API version: 3.0.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swaggerClientSonarr

import (
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/antihax/optional"
)

// Linger please
var (
	_ context.Context
)

type CalendarFeedApiService service

/*
CalendarFeedApiService
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *CalendarFeedApiFeedV3CalendarSonarrIcsGetOpts - Optional Parameters:
     * @param "PastDays" (optional.Int32) -
     * @param "FutureDays" (optional.Int32) -
     * @param "Tags" (optional.String) -
     * @param "Unmonitored" (optional.Bool) -
     * @param "PremieresOnly" (optional.Bool) -
     * @param "AsAllDay" (optional.Bool) -

*/

type CalendarFeedApiFeedV3CalendarSonarrIcsGetOpts struct {
	PastDays      optional.Int32
	FutureDays    optional.Int32
	Tags          optional.String
	Unmonitored   optional.Bool
	PremieresOnly optional.Bool
	AsAllDay      optional.Bool
}

func (a *CalendarFeedApiService) FeedV3CalendarSonarrIcsGet(ctx context.Context, localVarOptionals *CalendarFeedApiFeedV3CalendarSonarrIcsGetOpts) (*http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/feed/v3/calendar/sonarr.ics"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.PastDays.IsSet() {
		localVarQueryParams.Add("pastDays", parameterToString(localVarOptionals.PastDays.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FutureDays.IsSet() {
		localVarQueryParams.Add("futureDays", parameterToString(localVarOptionals.FutureDays.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Tags.IsSet() {
		localVarQueryParams.Add("tags", parameterToString(localVarOptionals.Tags.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Unmonitored.IsSet() {
		localVarQueryParams.Add("unmonitored", parameterToString(localVarOptionals.Unmonitored.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PremieresOnly.IsSet() {
		localVarQueryParams.Add("premieresOnly", parameterToString(localVarOptionals.PremieresOnly.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AsAllDay.IsSet() {
		localVarQueryParams.Add("asAllDay", parameterToString(localVarOptionals.AsAllDay.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["X-Api-Key"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		return localVarHttpResponse, newErr
	}

	return localVarHttpResponse, nil
}
